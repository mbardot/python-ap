import sys
import argparse

#var and seq are always strings
def Needleman_Wunsch(seq, var):
    grid = get_grid(seq, var)
    seq, var, score = get_score(seq, var, grid)
    print('seq:', seq, ' var:', var)
    print ('score:', score)
    return


def get_grid(seq, var):
    grid = [[0 for k in range(len(seq)+1)] for i in range(len(var)+1)]#seq is horizontal, var is vertical
    for l, line in enumerate(grid):
        for c, case in enumerate(line):
            
            if l == 0:
                grid[l][c] = -c*2

            elif c == 0:
                grid[l][0] = -l*2

            else:#we ar not on the first line or the first column
                if seq[c-1] == var[l-1]:#identical
                    match = 1
                else:#different
                    match = -1
                left = grid[l][c-1] - 2
                top = grid[l-1][c] - 2
                top_left = match + grid[l-1][c-1]   #bottom left value
                grid[l][c] =  max(top_left, left, top)#we take the maximum value for line[c]
                
    return grid


def get_score(seq, var, grid):
    score = 0
    l, c = len(grid)-2, len(grid[0])-2 #coordinates of the bottom right case
    new_var = var[-1]
    new_seq = seq[-1]
    
    while l!=0 and c!=0:#l=0 and c=0 is the top left case
        left = grid[l][c-1]
        top = grid[l-1][c]
        top_left = grid[l-1][c-1]
        maximum = max(left, top, top_left)
    
        if maximum == top_left:#match or mismatch
            new_var = var[l-1] + new_var
            new_seq = seq[c-1] + new_seq
            l = l - 1
            c = c -1
            if var[l-1] == seq[c-1]:
                score+=1
            else:
                score-=1

        elif maximum == top:#gap to seq
            new_var = var[l-1] + new_var
            new_seq = '-' + new_seq
            l = l - 1
            score-=2

        else:#gap to var
            new_var = '-' + new_var
            new_seq = seq[c-1] + new_seq
            c = c -1
            score-=2

    return new_seq, new_var, score
       

#to use debugging, because < doesn't work in vscode terminal
def get_arg():
    parser = argparse.ArgumentParser(description='Some description.')
    parser.add_argument('--input-file', help="input fasta file")
    args = parser.parse_args()
    return args


def main(file = get_arg().input_file):
    seq = ''
    var = ''
    var_id = False
    seq_id = False
    
    with open(file, 'r') as file:
        for line in file:
            line = line.rstrip()

            if line.startswith('>') and 'var' not in line:
                seq_id = True
                var_id = False
                if var!='' and seq!='':#get rid of the first entry in the loop
                    print('seq:', seq, 'var:', var)
                    Needleman_Wunsch(seq, var)
                    var = ''
                    seq = ''

            elif line.startswith('>') and 'var' in line:
                var_id = True
                seq_id = False

            if line.startswith('G') or line.startswith('T') or line.startswith('C') or line.startswith('A'):
                if seq_id:
                    seq = seq + line
                if var_id:
                    var = var + line

        print('seq:', seq, 'var:', var)
        Needleman_Wunsch(seq, var)
        return



main()